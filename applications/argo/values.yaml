argo-workflows:
  # commonLabels: argo-workflows-dev
  nameOverride: argo-workflows
  controller:
    replicas: 2
    metricsConfig:
      enabled: true
    retentionPolicy: 
      completed: 10
      failed: 10
      errored: 10
    persistence:
      connectionPool:
        maxIdleConns: 100
        maxOpenConns: 0
      # save the entire workflow into etcd and DB
      nodeStatusOffLoad: true
      # enable archiving of old workflows
      archive: true
      archiveTTL: 7d
      postgresql:
        host: postgres-postgresql
        port: 5432
        database: postgres
        tableName: argo_workflows
        # the database secrets must be in the same namespace of the controller
        userNameSecret:
          name: argo-postgres
          key: username
        passwordSecret:
          name: argo-postgres
          key: password
    
    workflowDefaults:
      metadata:
        labels:
          source: "argo-workflows-dev"
          # logging: artis
      spec:
        podMetadata:
          labels:
            logging: "artis"
        securityContext:
          # runAsNonRoot: true
          # runAsUser: 1000
        activeDeadlineSeconds: 28800
        podGC:
          strategy: OnPodCompletion
        serviceAccountName: argo
        ttlStrategy:
          secondsAfterCompletion: 10 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
          secondsAfterSuccess: 5     # Time to live after workflow is successful
          secondsAfterFailure: 5     # Time to live after workflow fails

    telemetryConfig:
      enabled: true
      # namespace: "argo"


    logging:
      format: "text"
    
    serviceLabels:
      app: "workflow-controller"

  server:
    replicas: 2
    secure: true
    baseHref: /argo/

    extraEnv:
      - name: SSO_DELEGATE_RBAC_TO_NAMESPACE
        value: "true"

    
    extraArgs:
    - --auth-mode=client
    - --auth-mode=sso

    logging:
      # -- Set the logging level (one of: `debug`, `info`, `warn`, `error`)
      level: info
      # -- Set the glog logging level
      globallevel: "0"
      # -- Set the logging format (one of: `text`, `json`)
      format: "text"

  extraObjects:
    - apiVersion: v1
      kind: Service
      metadata:
        labels:
          app: workflow-controller
        name: workflow-controller-metrics
        namespace: argo
      spec:
        ports:
        - name: metrics
          port: 9090
          protocol: TCP
          targetPort: 9090
        selector:
          app: workflow-controller
    - apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: argo-workflows
        namespace: argo
      spec:
        endpoints:
        - port: metrics
        selector:
          matchLabels:
            app.kubernetes.io/instance: argo-workflows
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        creationTimestamp: null
        name: prometheus-k8s
        namespace: argo
      rules:
      - apiGroups:
        - ""
        resources:
        - services
        - endpoints
        - pods
        verbs:
        - get
        - list
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        creationTimestamp: null
        name: prometheus-k8s
        namespace: argo
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: prometheus-k8s
      subjects:
      - kind: ServiceAccount
        name: prometheus-kube-prometheus-prometheus
        namespace: prometheus
    
    # - apiVersion: networking.k8s.io/v1
    #   kind: Ingress
    #   metadata:
    #     name: argo-ingress
    #     namespace: argo
    #     annotations:
    #       external-dns.alpha.kubernetes.io/alias: "true"
    #       # external-dns.alpha.kubernetes.io/target: target.example.com
    #       kubernetes.io/ingress.class: nginx
    #       nginx.ingress.kubernetes.io/backend-protocol: https
    #       nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    #       nginx.ingress.kubernetes.io/rewrite-target: /$2
    #   spec:
    #     rules:
    #       http:
    #         paths:
    #         - backend:
    #             service:
    #               name: argo-workflows-server
    #               port:
    #                 number: 2746
    #           path: /argo(/|$)(.*)
    #           pathType: Prefix

  # useDefaultArtifactRepo:  true

  artifactRepository:
    archiveLogs: true
    s3:
      accessKeySecret:
        name: minio-cred
        key: username
      secretKeySecret:
        name: minio-cred
        key: password
      # insecure will disable TLS. Primarily used for minio installs not configured with TLS
      insecure: true
      bucket: argo-storage
      endpoint: minio.argo.svc.cluster.local:9000