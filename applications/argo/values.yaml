argo-workflows:

  nameOverride: argo-workflows
  # controller:
  #   replicas: 2
  #   metricsConfig:
  #     enabled: true
  #   retentionPolicy: 
  #     completed: 10
  #     failed: 10
  #     errored: 10
    # persistence:
    #   connectionPool:
    #     maxIdleConns: 100
    #     maxOpenConns: 0
    #   # save the entire workflow into etcd and DB
    #   nodeStatusOffLoad: true
    #   # enable archiving of old workflows
    #   archive: true
    #   archiveTTL: 7d
    #   postgresql:
    #     host: argo-postgresql
    #     port: 5432
    #     database: postgres
    #     tableName: argo_workflows
    #     # the database secrets must be in the same namespace of the controller
    #     userNameSecret:
    #       name: argo-postgres
    #       key: username
    #     passwordSecret:
    #       name: argo-postgres
    #       key: password
    
    # workflowDefaults:
    #   spec:
    #     podMetadata:
    #       labels:
    #         logging: "tt"
    #     activeDeadlineSeconds: 28800
    #     podGC:
    #       strategy: OnPodCompletion
    #     serviceAccountName: argo
    #     ttlStrategy:
    #       secondsAfterCompletion: 10 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
    #       secondsAfterSuccess: 5     # Time to live after workflow is successful
    #       secondsAfterFailure: 5     # Time to live after workflow fails



  # useDefaultArtifactRepo:  true

  # artifactRepository:
  #   archiveLogs: true
  #   s3:
  #     accessKeySecret:
  #       name: minio
  #       key: root-user
  #     secretKeySecret:
  #       name: minio
  #       key: root-password
  #     # insecure will disable TLS. Primarily used for minio installs not configured with TLS
  #     insecure: true
  #     bucket: argo-storage
  #     endpoint: minio.argo:9000

minio:
  tls:
    enabled: false
  auth:
    ## @param auth.rootUser MinIO&reg; root username
    ##
    rootUser: andres
    ## @param auth.rootPassword Password for MinIO&reg; root user
    ##
    rootPassword: "andresRules"
  defaultBuckets: "argo-storage"

postgresql:
    postgresql:
      ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
      ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
      ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
      ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
      ## @param global.postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
      ## @param global.postgresql.auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.replicationPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ##
      auth:
        postgresPassword: "andresRules"
        username: "andres"
        password: "andresRules"
        database: "postgres"
        existingSecret: ""
        secretKeys:
          adminPasswordKey: "password"
          userPasswordKey: "username"
      